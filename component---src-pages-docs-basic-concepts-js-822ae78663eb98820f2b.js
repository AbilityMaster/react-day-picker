webpackJsonp([0x765118b4a3d4],{355:function(e,t,a){(function(l){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var c=a(1),o=(n(c),a(16)),d=n(o),s=a(61),i=n(s),r=a(21),u=n(r),h=a(8),m=n(h);t.default=function(){return l.createElement(u.default,{title:"Basic concepts"},l.createElement("p",null,"This guide illustrates the react-day-picker’s basic concepts by implementing a date picker to select, clear and disable days from the calendar."),l.createElement("blockquote",null,l.createElement("p",null,"You don’t need to read this guide to start using react-day-picker: see the ",l.createElement(d.default,{to:"/examples"},"examples")," if you prefer to directly copy & paste code in your application :-)")),l.createElement("p",null,"As default, react-day-picker just displays the calendar of the current month."),l.createElement(m.default,{name:"basic-concepts-01"}),l.createElement("h2",null,"Selecting a day"),l.createElement("p",null,"Since react-day-picker doesn’t hold the selected day in its state, you have to hold it in ",l.createElement("i",null,"your component’s state")," as the user interacts with the calendar."),l.createElement("p",null,"The following component uses the ",l.createElement("code",null,"onDayClick")," prop to hold the selected day in its own state. Try to click or tap on a day cell!"),l.createElement(m.default,{lines:"7-16,20-26",name:"basic-concepts-02"}),l.createElement("p",null,"Now, we want to highlight the day cell to show in the calendar which day has been selected. This is done using the ",l.createElement("code",null,"selectedDays")," prop."),l.createElement(m.default,{lines:"22",name:"basic-concepts-03"}),l.createElement("p",null,"Click or tap a day to highlight its cell."),l.createElement("blockquote",null,l.createElement("p",null,"Using the the browser’s developer tools, note how the selected day cell receive a"," ",l.createElement("code",null,"DayPicker-Day",l.createElement("strong",null,"--selected"))," ","CSS modifier. Custom modifiers can be added to day cells using the"," ",l.createElement("code",null,"modifiers")," prop. Read more about them in the"," ",l.createElement(d.default,{to:"/docs/matching-days"},"Matching days")," guide.")),l.createElement("h3",null,"Clearing the selected day"),l.createElement("p",null,"When a selected day is clicked again, we want to clear it. This can be made setting the component’s ",l.createElement("code",null,"selectedDay")," to"," ",l.createElement("code",null,"undefined"),"."),l.createElement("p",null,"The ",l.createElement("code",null,"onDayClick")," handler receives as second argument an object that can be inspected to check if the clicked day has been selected or not."),l.createElement(m.default,{lines:"15-19",name:"basic-concepts-04"}),l.createElement("p",null,"Click or tap a day to see how it’s cleared when selected again."),l.createElement("h2",null,"Marking days as disabled"),l.createElement("p",null,"Disabled days should not respond to the user’s interaction and should appear as “disabled” (e.g. grayed out) on the calendar. Here we are displaying all the Sundays as disabled, using the"," ",l.createElement("code",null,"disabledDays")," prop."),l.createElement(m.default,{name:"basic-concepts-05"}),l.createElement("blockquote",null,l.createElement("p",null,"Using the the browser’s developer tools, note how the disabled day cell receive a"," ",l.createElement("code",null,"DayPicker-Day",l.createElement("strong",null,"--disabled"))," ","CSS modifier.")),l.createElement("p",null,"In our selectable calendar, we can prevent the user selecting a disabled day inspecting the ",l.createElement("code",null,"disabled")," modifier in the"," ",l.createElement("code",null,"handleDayClick")," handler:"),l.createElement(m.default,{lines:"15-18,31",name:"basic-concepts-06"}),l.createElement("p",null,"That’s it. You know now the basic concepts of react-day-picker: how to select and disable days and how to use the ",l.createElement("code",null,"onDayClick")," event handler."),l.createElement("p",null,"react-day-picker is very flexible: using ",l.createElement("em",null,"modifiers")," ",l.createElement(d.default,{to:"/docs/matching-days"},"you can match days")," to change the aspect of the day cells, according to your app’s needs. You can use"," ",l.createElement(d.default,{to:"/api/DayPicker"},"its extensive API")," to further customize the react-day-picker’s behavior and layout."),l.createElement("p",null,"A very common implementation of react-day-picker is to bind it with an"," ",l.createElement("code",null,"input")," form field. This is why we included in the package the"," ",l.createElement(d.default,{to:"/docs/input"},"DayPickerInput")," component."),l.createElement(i.default,{to:"/docs/matching-days",label:"Matching days"}))},e.exports=t.default}).call(t,a(2))}});
//# sourceMappingURL=component---src-pages-docs-basic-concepts-js-822ae78663eb98820f2b.js.map