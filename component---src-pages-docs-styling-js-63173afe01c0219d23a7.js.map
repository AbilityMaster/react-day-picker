{"version":3,"sources":["webpack:///component---src-pages-docs-styling-js-63173afe01c0219d23a7.js","webpack:///./src/pages/docs/styling.js"],"names":["webpackJsonp","359","module","exports","__webpack_require__","Glamor","_interopRequireDefault","obj","__esModule","default","_react","_gatsbyLink","_gatsbyLink2","_DocPage","_DocPage2","_CodeSample","_CodeSample2","_CodeBlock","_CodeBlock2","_NextButton","_NextButton2","createElement","title","href","language","to","name","id","label","call"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,EAASC,IAEJ,SAASC,GAAS,YA4B9C,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GA1BvFJ,EAAQK,YAAa,CCPtB,IAAAE,GAAAN,EAAA,GACAO,GDUeL,EAAuBI,GCVtCN,EAAA,KDcKQ,EAAeN,EAAuBK,GCZ3CE,EAAAT,EAAA,IDgBKU,EAAYR,EAAuBO,GCfxCE,EAAAX,EAAA,GDmBKY,EAAeV,EAAuBS,GCjB3CE,EAAAb,EAAA,IDqBKc,EAAcZ,EAAuBW,GCpB1CE,EAAAf,EAAA,IDwBKgB,EAAed,EAAuBa,EAI1ChB,GAAQM,QC1BM,iBACbJ,GAAAgB,cAAAP,EAAAL,SAASa,MAAM,WACbjB,EAAAgB,cAAA,uCAC8B,IAC5BhB,EAAAgB,cAAA,KAAGE,KAAK,sEAAR,iBAEK,IAJP,kGASAlB,EAAAgB,cAAA,kBACEhB,EAAAgB,cAAA,oCAC2B,IACzBhB,EAAAgB,cAAA,KAAGE,KAAK,mCAAR,mBAFF,0DAGiD,IAC/ClB,EAAAgB,cAAA,KAAGE,KAAK,6BACNlB,EAAAgB,cAAA,2BACG,IANP,8CAO8C,IAC5ChB,EAAAgB,cAAA,KAAGE,KAAK,gBAAR,cARF,MAYFlB,EAAAgB,cAAA,0CAEAhB,EAAAgB,cAAA,iGAEehB,EAAAgB,cAAA,4BAFf,KAKAhB,EAAAgB,cAAAH,EAAAT,SAAWe,SAAS,OAApB,wDAIAnB,EAAAgB,cAAA,gDACuC,IACrChB,EAAAgB,cAAA,KAAGE,KAAK,yCAAR,sBAFF,MAKAlB,EAAAgB,cAAAH,EAAAT,QAAA,iDAEAJ,EAAAgB,cAAA,yDAEAhB,EAAAgB,cAAAH,EAAAT,SAAWe,SAAS,QAApB,mFACAnB,EAAAgB,cAAA,qGAKAhB,EAAAgB,cAAA,+BACAhB,EAAAgB,cAAA,SACEhB,EAAAgB,cAAAT,EAAAH,SAAMgB,GAAG,uBAAT,aADF,qCAEU,IACRpB,EAAAgB,cAAA,KAAGE,KAAK,4BACNlB,EAAAgB,cAAA,0BACG,IALP,sCAMqChB,EAAAgB,cAAA,6BANrC,qCAOwBhB,EAAAgB,cAAA,4BAPxB,8DAQoChB,EAAAgB,cAAA,2CARpC,KAWAhB,EAAAgB,cAAA,0CAEAhB,EAAAgB,cAAA,qBACY,IACVhB,EAAAgB,cAAAT,EAAAH,SAAMgB,GAAG,kCACPpB,EAAAgB,cAAA,gCACM,IAJV,qEAQAhB,EAAAgB,cAAAL,EAAAP,SAAYiB,KAAK,mBAEjBrB,EAAAgB,cAAA,MAAIM,GAAG,eAAP,4BACAtB,EAAAgB,cAAA,2DACkD,IAChDhB,EAAAgB,cAAA,KAAGE,KAAK,8CAAR,eAFF,YAGM,IACJlB,EAAAgB,cAAA,KAAGE,KAAK,6BACNlB,EAAAgB,cAAA,2BACG,IANP,oCASAhB,EAAAgB,cAAAH,EAAAT,QAAA,2NAWAJ,EAAAgB,cAAA,gDAEAhB,EAAAgB,cAAA,4JAKAhB,EAAAgB,cAAAH,EAAAT,QAAA,oUAiBAJ,EAAAgB,cAAAD,EAAAX,SAAYgB,GAAG,qBAAqBG,MAAM,mBDqI7C1B,EAAOC,QAAUA,EAAiB,UACL0B,KAAK1B,EAASC,EAAoB","file":"component---src-pages-docs-styling-js-63173afe01c0219d23a7.js","sourcesContent":["webpackJsonp([212197719340608],{\n\n/***/ 359:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Glamor) {'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _gatsbyLink = __webpack_require__(16);\n\t\n\tvar _gatsbyLink2 = _interopRequireDefault(_gatsbyLink);\n\t\n\tvar _DocPage = __webpack_require__(21);\n\t\n\tvar _DocPage2 = _interopRequireDefault(_DocPage);\n\t\n\tvar _CodeSample = __webpack_require__(8);\n\t\n\tvar _CodeSample2 = _interopRequireDefault(_CodeSample);\n\t\n\tvar _CodeBlock = __webpack_require__(22);\n\t\n\tvar _CodeBlock2 = _interopRequireDefault(_CodeBlock);\n\t\n\tvar _NextButton = __webpack_require__(60);\n\t\n\tvar _NextButton2 = _interopRequireDefault(_NextButton);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = function () {\n\t  return Glamor.createElement(\n\t    _DocPage2.default,\n\t    { title: 'Styling' },\n\t    Glamor.createElement(\n\t      'p',\n\t      null,\n\t      'To style the component, use',\n\t      ' ',\n\t      Glamor.createElement(\n\t        'a',\n\t        { href: 'https://github.com/gpbl/react-day-picker/blob/master/src/style.css' },\n\t        'src/style.css'\n\t      ),\n\t      ' ',\n\t      'as template and update it to fit the desired style. Then, just include it with your CSS files.'\n\t    ),\n\t    Glamor.createElement(\n\t      'blockquote',\n\t      null,\n\t      Glamor.createElement(\n\t        'p',\n\t        null,\n\t        'The CSS classes follow a',\n\t        ' ',\n\t        Glamor.createElement(\n\t          'a',\n\t          { href: 'https://css-tricks.com/bem-101/' },\n\t          'BEM-like syntax'\n\t        ),\n\t        '. If you need to customize the CSS class names, use the',\n\t        ' ',\n\t        Glamor.createElement(\n\t          'a',\n\t          { href: '/api/DayPicker#classnames' },\n\t          Glamor.createElement(\n\t            'code',\n\t            null,\n\t            'classNames'\n\t          )\n\t        ),\n\t        ' ',\n\t        'prop. Using this prop you can also import a',\n\t        ' ',\n\t        Glamor.createElement(\n\t          'a',\n\t          { href: '#css-modules' },\n\t          'CSS Module'\n\t        ),\n\t        '.'\n\t      )\n\t    ),\n\t    Glamor.createElement(\n\t      'h3',\n\t      null,\n\t      'Importing the style template'\n\t    ),\n\t    Glamor.createElement(\n\t      'p',\n\t      null,\n\t      'You can also import and extend the CSS template in your Sass files, for example from ',\n\t      Glamor.createElement(\n\t        'code',\n\t        null,\n\t        'node_modules'\n\t      ),\n\t      ':'\n\t    ),\n\t    Glamor.createElement(\n\t      _CodeBlock2.default,\n\t      { language: 'css' },\n\t      '@import \"../node_modules/react-day-picker/lib/style\"'\n\t    ),\n\t    Glamor.createElement(\n\t      'p',\n\t      null,\n\t      'or in your JS files (e.g. when using',\n\t      ' ',\n\t      Glamor.createElement(\n\t        'a',\n\t        { href: 'https://github.com/webpack/css-loader' },\n\t        'webpack-css-loader'\n\t      ),\n\t      '):'\n\t    ),\n\t    Glamor.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      'import \"react-day-picker/lib/style.css\";'\n\t    ),\n\t    Glamor.createElement(\n\t      'p',\n\t      null,\n\t      'The stylesheet is also available from unpkg:'\n\t    ),\n\t    Glamor.createElement(\n\t      _CodeBlock2.default,\n\t      { language: 'html' },\n\t      '<link rel=\"stylesheet\" href=\"https://unpkg.com/react-day-picker/lib/style.css\">'\n\t    ),\n\t    Glamor.createElement(\n\t      'p',\n\t      null,\n\t      'Keep in mind the default style is not production-tested and may change between releases.'\n\t    ),\n\t    Glamor.createElement(\n\t      'h2',\n\t      null,\n\t      'Styling modifiers'\n\t    ),\n\t    Glamor.createElement(\n\t      'p',\n\t      null,\n\t      Glamor.createElement(\n\t        _gatsbyLink2.default,\n\t        { to: '/docs/matching-days' },\n\t        'Modifiers'\n\t      ),\n\t      ' added to react-day-picker via the',\n\t      ' ',\n\t      Glamor.createElement(\n\t        'a',\n\t        { href: '/api/DayPicker#modifiers' },\n\t        Glamor.createElement(\n\t          'code',\n\t          null,\n\t          'modifiers'\n\t        )\n\t      ),\n\t      ' ',\n\t      'prop becomes CSS modifiers for the ',\n\t      Glamor.createElement(\n\t        'code',\n\t        null,\n\t        'DayPicker-day'\n\t      ),\n\t      ' class. For example, if you use a ',\n\t      Glamor.createElement(\n\t        'code',\n\t        null,\n\t        'firstOfMonth'\n\t      ),\n\t      ' modifier, the CSS class for the matched day cells will be ',\n\t      Glamor.createElement(\n\t        'code',\n\t        null,\n\t        'DayPicker-day--firstOfMonth'\n\t      ),\n\t      '.'\n\t    ),\n\t    Glamor.createElement(\n\t      'h3',\n\t      null,\n\t      'Inline styles with modifiers'\n\t    ),\n\t    Glamor.createElement(\n\t      'p',\n\t      null,\n\t      'Using the',\n\t      ' ',\n\t      Glamor.createElement(\n\t        _gatsbyLink2.default,\n\t        { to: '/api/DayPicker#modifiersstyles' },\n\t        Glamor.createElement(\n\t          'code',\n\t          null,\n\t          'modifiersStyles'\n\t        )\n\t      ),\n\t      ' ',\n\t      'prop, you can inline-style the cells for the specified modifiers:'\n\t    ),\n\t    Glamor.createElement(_CodeSample2.default, { name: 'styling-inline' }),\n\t    Glamor.createElement(\n\t      'h2',\n\t      { id: 'css-modules' },\n\t      'Styling with CSS Modules'\n\t    ),\n\t    Glamor.createElement(\n\t      'p',\n\t      null,\n\t      'Once you have setup your build system to import',\n\t      ' ',\n\t      Glamor.createElement(\n\t        'a',\n\t        { href: 'https://github.com/css-modules/css-modules' },\n\t        'CSS Modules'\n\t      ),\n\t      ', use the',\n\t      ' ',\n\t      Glamor.createElement(\n\t        'a',\n\t        { href: '/api/DayPicker#classnames' },\n\t        Glamor.createElement(\n\t          'code',\n\t          null,\n\t          'classNames'\n\t        )\n\t      ),\n\t      ' ',\n\t      'prop to use the imported styles:'\n\t    ),\n\t    Glamor.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      'import React from \\'react\\';\\nimport DayPicker from \\'react-day-picker\\';\\n\\nimport styles from \\'../styles/cssmodules.css\\';\\n\\nexport default function CSSModules() {\\n  return <DayPicker classNames={ styles } />\\n}'\n\t    ),\n\t    Glamor.createElement(\n\t      'h3',\n\t      null,\n\t      'Styling modifiers with CSS Modules'\n\t    ),\n\t    Glamor.createElement(\n\t      'p',\n\t      null,\n\t      'Since you can\\u2019t use the default\\u2019s BEM-like modifiers CSS classes, you need to specify modifiers using the class names from the imported module:'\n\t    ),\n\t    Glamor.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      'import React from \\'react\\';\\nimport DayPicker from \\'react-day-picker\\';\\nimport styles from \\'../styles/cssmodules.css\\';\\n\\nexport default function CSSModules() {\\n  return (\\n    <DayPicker \\n      classNames={ styles } \\n      modifiers={{\\n        [styles.birthday]: new Date(2018, 8, 19)\\n      }}\\n    />\\n  );\\n}'\n\t    ),\n\t    Glamor.createElement(_NextButton2.default, { to: '/docs/localization', label: 'Localization' })\n\t  );\n\t};\n\t\n\tmodule.exports = exports['default'];\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-docs-styling-js-63173afe01c0219d23a7.js","import React from 'react';\nimport Link from 'gatsby-link';\n\nimport DocPage from '../../containers/DocPage';\nimport CodeSample from '../../ui/CodeSample';\n\nimport CodeBlock from '../../ui/CodeBlock';\nimport NextButton from '../../ui/NextButton';\n\nexport default () => (\n  <DocPage title=\"Styling\">\n    <p>\n      To style the component, use{' '}\n      <a href=\"https://github.com/gpbl/react-day-picker/blob/master/src/style.css\">\n        src/style.css\n      </a>{' '}\n      as template and update it to fit the desired style. Then, just include it\n      with your CSS files.\n    </p>\n\n    <blockquote>\n      <p>\n        The CSS classes follow a{' '}\n        <a href=\"https://css-tricks.com/bem-101/\">BEM-like syntax</a>. If you\n        need to customize the CSS class names, use the{' '}\n        <a href=\"/api/DayPicker#classnames\">\n          <code>classNames</code>\n        </a>{' '}\n        prop. Using this prop you can also import a{' '}\n        <a href=\"#css-modules\">CSS Module</a>.\n      </p>\n    </blockquote>\n\n    <h3>Importing the style template</h3>\n\n    <p>\n      You can also import and extend the CSS template in your Sass files, for\n      example from <code>node_modules</code>:\n    </p>\n\n    <CodeBlock language=\"css\">\n      {`@import \"../node_modules/react-day-picker/lib/style\"`}\n    </CodeBlock>\n\n    <p>\n      or in your JS files (e.g. when using{' '}\n      <a href=\"https://github.com/webpack/css-loader\">webpack-css-loader</a>):\n    </p>\n\n    <CodeBlock>{`import \"react-day-picker/lib/style.css\";`}</CodeBlock>\n\n    <p>The stylesheet is also available from unpkg:</p>\n\n    <CodeBlock language=\"html\">{`<link rel=\"stylesheet\" href=\"https://unpkg.com/react-day-picker/lib/style.css\">`}</CodeBlock>\n    <p>\n      Keep in mind the default style is not production-tested and may change\n      between releases.\n    </p>\n\n    <h2>Styling modifiers</h2>\n    <p>\n      <Link to=\"/docs/matching-days\">Modifiers</Link> added to react-day-picker\n      via the{' '}\n      <a href=\"/api/DayPicker#modifiers\">\n        <code>modifiers</code>\n      </a>{' '}\n      prop becomes CSS modifiers for the <code>DayPicker-day</code> class. For\n      example, if you use a <code>firstOfMonth</code> modifier, the CSS class\n      for the matched day cells will be <code>DayPicker-day--firstOfMonth</code>.\n    </p>\n\n    <h3>Inline styles with modifiers</h3>\n\n    <p>\n      Using the{' '}\n      <Link to=\"/api/DayPicker#modifiersstyles\">\n        <code>modifiersStyles</code>\n      </Link>{' '}\n      prop, you can inline-style the cells for the specified modifiers:\n    </p>\n\n    <CodeSample name=\"styling-inline\" />\n\n    <h2 id=\"css-modules\">Styling with CSS Modules</h2>\n    <p>\n      Once you have setup your build system to import{' '}\n      <a href=\"https://github.com/css-modules/css-modules\">CSS Modules</a>, use\n      the{' '}\n      <a href=\"/api/DayPicker#classnames\">\n        <code>classNames</code>\n      </a>{' '}\n      prop to use the imported styles:\n    </p>\n    <CodeBlock>\n      {`import React from 'react';\nimport DayPicker from 'react-day-picker';\n\nimport styles from '../styles/cssmodules.css';\n\nexport default function CSSModules() {\n  return <DayPicker classNames={ styles } />\n}`}\n    </CodeBlock>\n\n    <h3>Styling modifiers with CSS Modules</h3>\n\n    <p>\n      Since you can’t use the default’s BEM-like modifiers CSS classes, you need\n      to specify modifiers using the class names from the imported module:\n    </p>\n\n    <CodeBlock>\n      {`import React from 'react';\nimport DayPicker from 'react-day-picker';\nimport styles from '../styles/cssmodules.css';\n\nexport default function CSSModules() {\n  return (\n    <DayPicker \n      classNames={ styles } \n      modifiers={{\n        [styles.birthday]: new Date(2018, 8, 19)\n      }}\n    />\n  );\n}`}\n    </CodeBlock>\n\n    <NextButton to=\"/docs/localization\" label=\"Localization\" />\n  </DocPage>\n);\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/docs/styling.js"],"sourceRoot":""}